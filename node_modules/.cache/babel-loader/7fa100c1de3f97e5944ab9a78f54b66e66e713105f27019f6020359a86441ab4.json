{"ast":null,"code":"// import React, { Component } from \"react\";\n// import { setState } from \"react\";\n// import SingleComment from \"./SingleComment\";\n\n// const CommentsList = ({ bookId }) => {\n//   // state = {\n//   //   comments: [],\n//   //   isLoading: true,\n//   // };\n\n//   const [comments, setComments] = setState([]);\n//   const [isLoading, setLoading] = setState(true);\n\n//   // c  omponentDidMount() {\n//   //   this.fetchComments();\n//   // }\n\n//   const fetchComments = async (bookId) => {\n//     try {\n//       const theBook = bookId;\n//       console.log(bookId);\n//       const response = await fetch(\n//         `https://striveschool-api.herokuapp.com/api/comments/${theBook}`,\n//         {\n//           headers: {\n//             Authorization:\n//               \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2M2M5NGQ2M2U3MzczODAwMTUzNzQ0MDIiLCJpYXQiOjE2NzUzNDIzNzksImV4cCI6MTY3NjU1MTk3OX0.T9SspPION27bTb5U75j_Ax7maF8wvgAJveRPtqnGsmc\",\n//           },\n//         }\n//       );\n//       const comments = await response.json();\n//       setComments(comments);\n//       setLoading(false);\n\n//       // this.setState({ comments, isLoading: false });\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   // const componentDidUpdate = (prevProps, prevState) => {\n//   //   if (prevProps.bookId !== this.props.bookId) {\n//   //     this.fetchComments();\n//   //   }\n//   // };\n\n//   return (\n//     <>\n//       {/* <div>{bookId}</div> */}\n//       <div className=\"comments-list\">\n//         {isLoading ? (\n//           <p>choose a book to read comments</p>\n//         ) : (\n//           comments.map((comment) => (\n//             <SingleComment key={comment._id} comment={comment} />\n//           ))\n//         )}\n//       </div>\n//     </>\n//   );\n// };\n\n// export default CommentsList;","map":{"version":3,"names":[],"sources":["/Users/nikolainiklaus/Documents/ec-u3-d3/src/components/CommentsList.jsx"],"sourcesContent":["// import React, { Component } from \"react\";\n// import { setState } from \"react\";\n// import SingleComment from \"./SingleComment\";\n\n// const CommentsList = ({ bookId }) => {\n//   // state = {\n//   //   comments: [],\n//   //   isLoading: true,\n//   // };\n\n//   const [comments, setComments] = setState([]);\n//   const [isLoading, setLoading] = setState(true);\n\n//   // c  omponentDidMount() {\n//   //   this.fetchComments();\n//   // }\n\n//   const fetchComments = async (bookId) => {\n//     try {\n//       const theBook = bookId;\n//       console.log(bookId);\n//       const response = await fetch(\n//         `https://striveschool-api.herokuapp.com/api/comments/${theBook}`,\n//         {\n//           headers: {\n//             Authorization:\n//               \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2M2M5NGQ2M2U3MzczODAwMTUzNzQ0MDIiLCJpYXQiOjE2NzUzNDIzNzksImV4cCI6MTY3NjU1MTk3OX0.T9SspPION27bTb5U75j_Ax7maF8wvgAJveRPtqnGsmc\",\n//           },\n//         }\n//       );\n//       const comments = await response.json();\n//       setComments(comments);\n//       setLoading(false);\n\n//       // this.setState({ comments, isLoading: false });\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   // const componentDidUpdate = (prevProps, prevState) => {\n//   //   if (prevProps.bookId !== this.props.bookId) {\n//   //     this.fetchComments();\n//   //   }\n//   // };\n\n//   return (\n//     <>\n//       {/* <div>{bookId}</div> */}\n//       <div className=\"comments-list\">\n//         {isLoading ? (\n//           <p>choose a book to read comments</p>\n//         ) : (\n//           comments.map((comment) => (\n//             <SingleComment key={comment._id} comment={comment} />\n//           ))\n//         )}\n//       </div>\n//     </>\n//   );\n// };\n\n// export default CommentsList;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}